// <auto-generated />
using System;
using ASM1.Repository.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASM1.Repository.Migrations
{
    [DbContext(typeof(CarSalesDbContext))]
    [Migration("20250928094551_InitialCreate2")]
    partial class InitialCreate2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ASM1.Repository.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<int>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("dealerId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fullName");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__B611CB7D0049E38E");

                    b.HasIndex("DealerId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("ASM1.Repository.Models.Dealer", b =>
                {
                    b.Property<int>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("dealerId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fullName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("transactionId");

                    b.HasKey("DealerId")
                        .HasName("PK__Dealer__5A9E9D961C30970D");

                    b.ToTable("Dealer", (string)null);

                    b.HasData(
                        new
                        {
                            DealerId = 1,
                            Email = "dealer@toyota-downtown.com",
                            FullName = "Downtown Toyota Dealer",
                            Password = "dealer123",
                            Phone = "+1-555-0123",
                            TransactionId = 1001
                        });
                });

            modelBuilder.Entity("ASM1.Repository.Models.DealerContract", b =>
                {
                    b.Property<int>("DealerContractId")
                        .HasColumnType("int")
                        .HasColumnName("dealerContractId");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("creditLimit");

                    b.Property<int>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("dealerId");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int")
                        .HasColumnName("manufacturerId");

                    b.Property<DateOnly?>("SignedDate")
                        .HasColumnType("date")
                        .HasColumnName("signedDate");

                    b.Property<decimal?>("TargetSales")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("targetSales");

                    b.HasKey("DealerContractId")
                        .HasName("PK__DealerCo__5D9704E720573FF3");

                    b.HasIndex("DealerId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("DealerContract", (string)null);
                });

            modelBuilder.Entity("ASM1.Repository.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("feedbackId");

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__2613FD24ACBA58F5");

                    b.HasIndex("CustomerId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("ASM1.Repository.Models.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int")
                        .HasColumnName("manufacturerId");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("country");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("ManufacturerId")
                        .HasName("PK__Manufact__02B55389ED519028");

                    b.ToTable("Manufacturer", (string)null);

                    b.HasData(
                        new
                        {
                            ManufacturerId = 1,
                            Address = "Toyota City, Aichi, Japan",
                            Country = "Japan",
                            Name = "Toyota Motors"
                        });
                });

            modelBuilder.Entity("ASM1.Repository.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<int>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("dealerId");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("orderDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<int>("VariantId")
                        .HasColumnType("int")
                        .HasColumnName("variantId");

                    b.HasKey("OrderId")
                        .HasName("PK__Order__0809335DA5E72A85");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerId");

                    b.HasIndex("VariantId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("ASM1.Repository.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("method");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<DateOnly?>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("paymentDate");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment__A0D9EFC6E641B2C2");

                    b.HasIndex("OrderId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("ASM1.Repository.Models.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .HasColumnType("int")
                        .HasColumnName("promotionId");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("discountAmount");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<string>("PromotionCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("promotionCode");

                    b.Property<DateOnly?>("ValidUntil")
                        .HasColumnType("date")
                        .HasColumnName("validUntil");

                    b.HasKey("PromotionId")
                        .HasName("PK__Promotio__99EB696E2E1B6388");

                    b.HasIndex("OrderId");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("ASM1.Repository.Models.Quotation", b =>
                {
                    b.Property<int>("QuotationId")
                        .HasColumnType("int")
                        .HasColumnName("quotationId");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<int>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("dealerId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("price");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<int>("VariantId")
                        .HasColumnType("int")
                        .HasColumnName("variantId");

                    b.HasKey("QuotationId")
                        .HasName("PK__Quotatio__7536E352113ABA0A");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerId");

                    b.HasIndex("VariantId");

                    b.ToTable("Quotation", (string)null);
                });

            modelBuilder.Entity("ASM1.Repository.Models.SalesContract", b =>
                {
                    b.Property<int>("SaleContractId")
                        .HasColumnType("int")
                        .HasColumnName("saleContractId");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<DateOnly?>("SignedDate")
                        .HasColumnType("date")
                        .HasColumnName("signedDate");

                    b.HasKey("SaleContractId")
                        .HasName("PK__SalesCon__BBA78B0BB1B2B884");

                    b.HasIndex("OrderId");

                    b.ToTable("SalesContract", (string)null);
                });

            modelBuilder.Entity("ASM1.Repository.Models.TestDrive", b =>
                {
                    b.Property<int>("TestDriveId")
                        .HasColumnType("int")
                        .HasColumnName("testDriveId");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<DateOnly?>("ScheduledDate")
                        .HasColumnType("date")
                        .HasColumnName("scheduledDate");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<int>("VariantId")
                        .HasColumnType("int")
                        .HasColumnName("variantId");

                    b.HasKey("TestDriveId")
                        .HasName("PK__TestDriv__1BEFF08411737214");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VariantId");

                    b.ToTable("TestDrive", (string)null);
                });

            modelBuilder.Entity("ASM1.Repository.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int?>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("dealerId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fullName");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int")
                        .HasColumnName("manufacturerId");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role");

                    b.HasKey("UserId")
                        .HasName("PK__User__CB9A1CFF85902E89");

                    b.HasIndex("DealerId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@carsales.com",
                            FullName = "System Administrator",
                            Password = "admin123",
                            Phone = "+1-555-0001",
                            Role = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            DealerId = 1,
                            Email = "john.smith@toyota-downtown.com",
                            FullName = "John Smith",
                            Password = "staff123",
                            Phone = "+1-555-0002",
                            Role = "DealerStaff"
                        },
                        new
                        {
                            UserId = 3,
                            DealerId = 1,
                            Email = "sarah.johnson@toyota-downtown.com",
                            FullName = "Sarah Johnson",
                            Password = "manager123",
                            Phone = "+1-555-0003",
                            Role = "DealerManager"
                        });
                });

            modelBuilder.Entity("ASM1.Repository.Models.VehicleModel", b =>
                {
                    b.Property<int>("VehicleModelId")
                        .HasColumnType("int")
                        .HasColumnName("vehicleModelId");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int")
                        .HasColumnName("manufacturerId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("VehicleModelId")
                        .HasName("PK__VehicleM__DF4B1849AF5DCC0A");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("VehicleModel", (string)null);
                });

            modelBuilder.Entity("ASM1.Repository.Models.VehicleVariant", b =>
                {
                    b.Property<int>("VariantId")
                        .HasColumnType("int")
                        .HasColumnName("variantId");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("color");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("ProductYear")
                        .HasColumnType("int")
                        .HasColumnName("productYear");

                    b.Property<int>("VehicleModelId")
                        .HasColumnType("int")
                        .HasColumnName("vehicleModelId");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("version");

                    b.HasKey("VariantId")
                        .HasName("PK__VehicleV__69E44B2D7D537419");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("VehicleVariant", (string)null);
                });

            modelBuilder.Entity("ASM1.Repository.Models.Customer", b =>
                {
                    b.HasOne("ASM1.Repository.Models.Dealer", "Dealer")
                        .WithMany("Customers")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__Customer__dealer__6FE99F9F");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("ASM1.Repository.Models.DealerContract", b =>
                {
                    b.HasOne("ASM1.Repository.Models.Dealer", "Dealer")
                        .WithMany("DealerContracts")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__DealerCon__deale__6C190EBB");

                    b.HasOne("ASM1.Repository.Models.Manufacturer", "Manufacturer")
                        .WithMany("DealerContracts")
                        .HasForeignKey("ManufacturerId")
                        .IsRequired()
                        .HasConstraintName("FK__DealerCon__manuf__6D0D32F4");

                    b.Navigation("Dealer");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("ASM1.Repository.Models.Feedback", b =>
                {
                    b.HasOne("ASM1.Repository.Models.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Feedback__custom__02FC7413");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ASM1.Repository.Models.Order", b =>
                {
                    b.HasOne("ASM1.Repository.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Order__customerI__797309D9");

                    b.HasOne("ASM1.Repository.Models.Dealer", "Dealer")
                        .WithMany("Orders")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__Order__dealerId__787EE5A0");

                    b.HasOne("ASM1.Repository.Models.VehicleVariant", "Variant")
                        .WithMany("Orders")
                        .HasForeignKey("VariantId")
                        .IsRequired()
                        .HasConstraintName("FK__Order__variantId__7A672E12");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ASM1.Repository.Models.Payment", b =>
                {
                    b.HasOne("ASM1.Repository.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Payment__orderId__7D439ABD");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ASM1.Repository.Models.Promotion", b =>
                {
                    b.HasOne("ASM1.Repository.Models.Order", "Order")
                        .WithMany("Promotions")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Promotion__order__00200768");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ASM1.Repository.Models.Quotation", b =>
                {
                    b.HasOne("ASM1.Repository.Models.Customer", "Customer")
                        .WithMany("Quotations")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Quotation__custo__0C85DE4D");

                    b.HasOne("ASM1.Repository.Models.Dealer", "Dealer")
                        .WithMany("Quotations")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__Quotation__deale__0E6E26BF");

                    b.HasOne("ASM1.Repository.Models.VehicleVariant", "Variant")
                        .WithMany("Quotations")
                        .HasForeignKey("VariantId")
                        .IsRequired()
                        .HasConstraintName("FK__Quotation__varia__0D7A0286");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ASM1.Repository.Models.SalesContract", b =>
                {
                    b.HasOne("ASM1.Repository.Models.Order", "Order")
                        .WithMany("SalesContracts")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__SalesCont__order__05D8E0BE");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ASM1.Repository.Models.TestDrive", b =>
                {
                    b.HasOne("ASM1.Repository.Models.Customer", "Customer")
                        .WithMany("TestDrives")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__TestDrive__custo__08B54D69");

                    b.HasOne("ASM1.Repository.Models.VehicleVariant", "Variant")
                        .WithMany("TestDrives")
                        .HasForeignKey("VariantId")
                        .IsRequired()
                        .HasConstraintName("FK__TestDrive__varia__09A971A2");

                    b.Navigation("Customer");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ASM1.Repository.Models.User", b =>
                {
                    b.HasOne("ASM1.Repository.Models.Dealer", "Dealer")
                        .WithMany("Users")
                        .HasForeignKey("DealerId")
                        .HasConstraintName("FK__User__dealerId__68487DD7");

                    b.HasOne("ASM1.Repository.Models.Manufacturer", "Manufacturer")
                        .WithMany("Users")
                        .HasForeignKey("ManufacturerId")
                        .HasConstraintName("FK__User__manufactur__693CA210");

                    b.Navigation("Dealer");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("ASM1.Repository.Models.VehicleModel", b =>
                {
                    b.HasOne("ASM1.Repository.Models.Manufacturer", "Manufacturer")
                        .WithMany("VehicleModels")
                        .HasForeignKey("ManufacturerId")
                        .IsRequired()
                        .HasConstraintName("FK__VehicleMo__manuf__72C60C4A");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("ASM1.Repository.Models.VehicleVariant", b =>
                {
                    b.HasOne("ASM1.Repository.Models.VehicleModel", "VehicleModel")
                        .WithMany("VehicleVariants")
                        .HasForeignKey("VehicleModelId")
                        .IsRequired()
                        .HasConstraintName("FK__VehicleVa__vehic__75A278F5");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("ASM1.Repository.Models.Customer", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");

                    b.Navigation("Quotations");

                    b.Navigation("TestDrives");
                });

            modelBuilder.Entity("ASM1.Repository.Models.Dealer", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("DealerContracts");

                    b.Navigation("Orders");

                    b.Navigation("Quotations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ASM1.Repository.Models.Manufacturer", b =>
                {
                    b.Navigation("DealerContracts");

                    b.Navigation("Users");

                    b.Navigation("VehicleModels");
                });

            modelBuilder.Entity("ASM1.Repository.Models.Order", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Promotions");

                    b.Navigation("SalesContracts");
                });

            modelBuilder.Entity("ASM1.Repository.Models.VehicleModel", b =>
                {
                    b.Navigation("VehicleVariants");
                });

            modelBuilder.Entity("ASM1.Repository.Models.VehicleVariant", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Quotations");

                    b.Navigation("TestDrives");
                });
#pragma warning restore 612, 618
        }
    }
}
